#!/usr/bin/env node

var fs = require( 'fs' );
var format = require( 'util' ).format;

var GetOpt = require( 'node-getopt' );
var async = require( 'async' );
var emailAddresses = require( 'email-addresses' );

var nodemailer = require( 'nodemailer' );
var gmailTransport = require( __dirname + '/nodemailer-gmail-oauth2-transport' );

var Authenticate = require( __dirname + '/authenticate-cli' );

var openURL = require( __dirname + '/open-url' );

var getopt = new GetOpt( [
	[ 's', 'subject=STRING' ],
	[ 'c', 'cc=ADDRESS+', 'Use multiple arguments to CC multiple addresses.' ],
	[ 'b', 'bcc=ADDRESS+', 'Use multiple arguments to BCC multiple addresses.' ],
	[ 't', 'to=ADDRESS+', 'Explicit argument for TO address. Use multiple arguments to send to multiple addresses.' ],
	[ 'a', 'attachment=PATH+', 'Pathname to attachment. MIME type will be detected from the extension. Use multiple arguments to attach multiple files.' ],
	[ 'A', 'attachment-filename=STRING+', 'Used to change the name of the attached file (e.g., to set the correct MIME type or if the attachment is being streamed).' ],
	[ 'S', 'send', "Don't create a draft: send a message." ],
	[ 'N', 'no-open', "Don't open the message for editing in Gmail." ],
	[ 'C', 'config=STRING', "Path to config path. Default's to current directory's config.json." ],
	[ 'r', 'inreplyto=STRING', "Message ID of the e-mail we'd like to reply to (also put in references)"],
	[ 'h', 'help' ]
] ).bindHelp(
	"\n" +
	"Usage: send-gmail TO_ADDRESS+ [OPTIONS]\n\n" +
	"Draft an email through Gmail.  Can optionally send instead with --send.\n" +
	"\n" +
	"If set, STDIN is used as the message body.\n" +
	"\n" +
	"Gets and uses oAuth2 credentials.\n" +
  	"\n" +
	"[[OPTIONS]]\n\n" +
	"Examples:\n\n" +
	"echo 'Hello World' | send-gmail foo@example.com --subject Hello\n\n" +
	"send-gmail foo@example.com --subject 'Attachments' --attachment photo.jpeg < body.txt\n\n" +
	"send-gmail foo@example.com --subject 'Fancy' \\\n" +
	"\t--attachment <( grep 404 /var/log/apache2/access_log ) \\\n" +
	"\t--attachment-filename 404-logs.txt\n"
);

var opts = getopt.parseSystem();

function isNotEmail( address ) {
	return ! emailAddresses.parseOneAddress( address );
}

var to = opts.argv.concat( opts.options.to || [] );
var cc = opts.options.cc || [];
var bcc = opts.options.bcc || [];
var addresses = Array.prototype.concat.apply( to, cc, bcc );
var attachments = opts.options.attachment || [];
var attachmentFileNames = opts.options['attachment-filename'] || [];
var configFile = opts.options.config || process.cwd() + '/config.json';
var inReplyTo = opts.options.inreplyto || '';


function findInvalidAddresses( callback ) {
	var invalidAddresses = addresses.filter( isNotEmail );
	if ( invalidAddresses.length ) {
		console.error( "Invalid Address:" );
		console.error( "\t" + invalidAddresses.join( "\n\t" ) );
		callback( "Invalid Address" );
	} else {
		callback( null );
	}
}

function findInvalidFiles( callback ) {
	async.reject( attachments.concat( configFile ), fs.exists, function( invalidFiles ) {
		if ( invalidFiles.length ) {
			console.error( "Invalid File:" );
			console.error( "\t" + invalidFiles.join( "\n\t" ) );
			callback( "Invalid File" );
		} else {
			callback( null );
		}
	} );
}

function ensureRequiredOptions( callback ) {
	if ( ! addresses.length ) {
		callback( 'No Addresses' );
	} else if ( ! opts.options.subject ) {
		callback( 'No Subject' );
	} else {
		callback( null );
	}
}

function authenticate( callback ) {
	var authenticate = Authenticate( require( configFile ) );

	authenticate.authenticate( function( err ) {
		if ( err ) {
			callback( err );
		}

		callback( null, authenticate );
	} );
}

function send( authenticate, callback ) {
	var message = {
		to: to.join( ', ' ),
		cc: cc.join( ', ' ),
		bcc: bcc.join( ', ' ),
		subject: opts.options.subject,
		text: process.stdin.isTTY ? '' : process.stdin,
		attachments: attachments.map( function( file, index ) {
			var attachment = { path: file };
			if ( attachmentFileNames[index] ) {
				attachment.filename = attachmentFileNames[index];
			}
			return attachment;
		} )
	};
	if (inReplyTo) {
		message.inReplyTo = inReplyTo;
		message.references = [inReplyTo];
	}

	var transporter = nodemailer.createTransport( gmailTransport( { client: authenticate.client, draft: ! opts.options.send } ) );

	transporter.sendMail( message, callback );
}

function getURL( info, callback ) {
	// https://mail.google.com/mail/b/user@domain.com/
	// https://mail.google.com/a/domain.com/

	var message = info.response.message ? info.response.message : info.response;
	var formatString;

	if ( ~ message.labelIds.indexOf( 'SENT' ) ) {
		formatString = 'https://mail.google.com/mail/b/%s/#sent/%s';
	} else {
		formatString = 'https://mail.google.com/mail/b/%s/#drafts?compose=%s';
	}

	callback( null, format(
		formatString,
		info.account,
		message.id
	) );
}

function maybeOpenURL( url, callback ) {
	if ( opts.options['no-open'] ) {
		callback( null, url );
	} else {
		openURL( url, callback );
	}
}

async.waterfall( [
	findInvalidAddresses,
	findInvalidFiles,
	ensureRequiredOptions,
	authenticate,
	send,
	getURL,
	maybeOpenURL,
], function( err, URL ) {
	if ( err ) {
		console.error( err );
	} else {
		console.log( URL );
	}
} );
